<<<<<<< HEAD
install.packages('BiocManager')'
''
install.packages('BiocManager')
BiocManager::install()
BiocManager::install()
install.packages('BiocManager')
BiocManager::install()
BiocManager::install('Prostar')
BiocManager::install('MSnbase')
intall.packages('ncdf4')
install.packages('ncdf4')
install.packages('ncdf4')
install.packages('ncdf4')
BiocManager::install('MSnbase')
BiocManager::install('MultiAssayExperiment')
BiocManager::install('SummarizedExperiment')
install.packages('sass')
source('/home/samuel/Documents/Github/DAPAR/R/PipelineTemplate-class.R')
library(MultiAssayExperiment)
source('/home/samuel/Documents/Github/DAPAR/R/PipelineTemplate-class.R')
source('~/Documents/Github/DAPAR/R/PipelineTemplate-class.R')
source('~/Documents/Github/DAPAR/R/PipelineTemplate-class.R')
source('~/Documents/Github/DAPAR/R/PipelineTemplate-class.R')
source('~/Documents/Github/DAPAR/R/PipelineTemplate-class.R')
source('~/Documents/Github/DAPAR/R/PipelineTemplate-class.R')
source('~/Documents/Github/DAPAR/R/PipelineTemplate-class.R')
source('~/Documents/Github/DAPAR/R/PipelineTemplate-class.R')
source('~/Documents/Github/DAPAR/R/PipelineTemplate-class.R')
shiny::runApp('Documents/Github/Prostar/inst/ProstarApp')
install.packages("shinydashboard")
shiny::runApp('Documents/Github/Prostar/inst/ProstarApp')
install.packages("shinydashboardPlus")
shiny::runApp('Documents/Github/Prostar/inst/ProstarApp')
install.packages("shinyjqui")
install.packages("shinyjs")
install.packages("shinyjs")
runApp('Documents/Github/Prostar/inst/ProstarApp')
setwd("~/Documents/Github/Prostar/inst/ProstarApp")
runApp('Documents/Github/Prostar/inst/ProstarApp')
runApp()
install.packages("Cairo")
install.packages("tidyverse")
install.packages("Cairo")
install.packages("Cairo")
runApp()
BiocManager::install('DAPARdata')
runApp()
BiocManager::install('BiocStyle')
install.packages("~/Documents/Github/DAPAR_2.0.tar.gz", repos = NULL, type = "source")
runApp()
source('~/Documents/Github/DAPAR/R/PipelineTemplate-class.R')
source('~/Documents/Github/DAPAR/R/PipelineTemplate-class.R')
runApp()
source('~/Documents/Github/DAPAR/R/PipelineTemplate-class.R')
runApp()
library(MultiAssayExperiment)
runApp()
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/PipelineTemplate-class.R')
runApp()
runApp()
runApp()
runApp()
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/PipelineTemplate-class.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/PipelineTemplate-class.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/PipelineTemplate-class.R')
source('~/Documents/Github/DAPAR/R/utils.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/PipelineTemplate-class.R')
runApp()
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/PipelineTemplate-class.R')
remove.packages("DAPAR", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
shiny::runApp()
install.packages("~/Documents/Github/DAPAR_2.0.tar.gz", repos = NULL, type = "source")
runApp()
library(MultiAssayExperiment)
runApp()
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/PipelineTemplate-class.R')
runApp()
library(shiny)
library(shinydashboard)
body <- dashboardBody(
fluidRow(
tabBox(
title = NULL, width = 12,
# The id lets us use input$tabset1 on the server to find the current tab
id = "tabset1", height = "250px",
tabPanel("Victim", "Victim tab"),
tabPanel("Trafficker", "Trafficker tab")
)
),
fluidRow(infoBoxOutput("tabset1Selected"))
)
shinyApp(
ui = dashboardPage(
dashboardHeader(title = "Human Trafficking"),
dashboardSidebar(disable = TRUE),
body
),
server = function(input, output) {
# The currently selected tab from the tab box
output$tabset1Selected <- renderInfoBox({
infoBox("Selected Tab", input$tabset1, icon = icon("info-circle"))
})
}
)
if (interactive()) {
library(shiny)
# A dashboard header with 3 dropdown menus
header <- dashboardHeader(
title = "Dashboard Demo",
# Dropdown menu for messages
dropdownMenu(type = "messages", badgeStatus = "success",
messageItem("Support Team",
"This is the content of a message.",
time = "5 mins"
),
messageItem("Support Team",
"This is the content of another message.",
time = "2 hours"
),
messageItem("New User",
"Can I get some help?",
time = "Today"
)
),
# Dropdown menu for notifications
dropdownMenu(type = "notifications", badgeStatus = "warning",
notificationItem(icon = icon("users"), status = "info",
"5 new members joined today"
),
notificationItem(icon = icon("warning"), status = "danger",
"Resource usage near limit."
),
notificationItem(icon = icon("shopping-cart", lib = "glyphicon"),
status = "success", "25 sales made"
),
notificationItem(icon = icon("user", lib = "glyphicon"),
status = "danger", "You changed your username"
)
),
# Dropdown menu for tasks, with progress bar
dropdownMenu(type = "tasks", badgeStatus = "danger",
taskItem(value = 20, color = "aqua",
"Refactor code"
),
taskItem(value = 40, color = "green",
"Design new layout"
),
taskItem(value = 60, color = "yellow",
"Another task"
),
taskItem(value = 80, color = "red",
"Write documentation"
)
)
)
shinyApp(
ui = dashboardPage(
header,
dashboardSidebar(),
dashboardBody()
),
server = function(input, output) { }
)
}
runApp()
source('~/Documents/Github/Prostar/inst/ProstarApp/modules/process/peptide/module_Peptide_Agregation.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/protein-pipeline-class.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/protein-pipeline-class.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/protein-pipeline-class.R')
runApp()
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
runApp()
runApp()
runApp()
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
runApp()
installed.packages()["Prostar","Version"]
installed.packages()["Prostar"]
if (!installed.packages()["Prostar"])) installed.packages()["Prostar",'Version'], NA
if (!installed.packages()["Prostar"]) installed.packages()["Prostar",'Version'], N
if (!installed.packages()["Prostar"]) installed.packages()["Prostar",'Version'] NA
if (!installed.packages()["Prostar"]) installed.packages()["Prostar",'Version'] else NA
if (is.na(installed.packages()["Prostar"])) NA else installed.packages()["Prostar",'Version']
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
runApp()
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
runApp()
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
runApp()
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
runApp()
library(MultiAssayExperiment)
shiny::runApp()
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
runApp()
runApp()
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
runApp()
=======
dropdownActionMenu(title="Menu",
actionItem("mnuFirst","Main"),
actionItem("mnuSecond","OAC"),
actionItem("mnuFirst","COAD")
)
),
dashboardSidebar(width = 150,
sidebarMenu(
menuItem("Dashboard", tabName = "main", icon = icon("dashboard")),
menuItem("COAD", tabName = "COAD", icon = icon("venus-mars"),dropdownActionMenu(title="Patients",
actionItem("mnuFirst","005"),
actionItem("mnuSecond","036"),
actionItem("mnuFirst","013"),
actionItem("mnuSecond","036")
)),
menuItem("OAC", tabName = "OAC", icon = icon("venus-mars"),dropdownActionMenu(title="Patients",
actionItem("mnuFirst","005"),
actionItem("mnuSecond","036"),
actionItem("mnuFirst","013"),
actionItem("mnuSecond","036")
))
)),
dashboardBody(
tabItems(bodyHome)
)
)
server <- function(input, output, session){
output$Table1 <- DT::renderDataTable({
datatable(iris)
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(shinyjs)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
# initialize shinyjs
shinyjs::useShinyjs(),
# add custom JS code
extendShinyjs(text = "shinyjs.hidehead = function(parm){
$('header').css('display', parm);
}"),
actionButton("button","hide header"),
actionButton("button2","show header")
)
)
server <- function(input, output) {
observeEvent(input$button, {
js$hidehead('none')
})
observeEvent(input$button2, {
js$hidehead('')
})
}
shinyApp(ui, server)
runApp('Test_DB/inst/ProstarApp')
runApp('Test_DB/inst/ProstarApp')
shiny::runApp('Test_DB/inst/ProstarApp')
runApp('~/Github/Prostar_master/inst/ProstarApp')
fichiers <- list.files("~/Github/Prostar_master/inst/ProstarApp/characters/")
for (f in fichiers) {
print(f)
source(paste0("~/Github/Prostar_master/inst/ProstarApp/characters/",f))
}
runApp('Prostar_master/inst/ProstarApp')
runApp('~/Github/Test_DB/inst/ProstarApp')
runApp('Test_DB/inst/ProstarApp')
shiny::runApp('Test_DB/inst/ProstarApp')
runApp('Test_DB/inst/ProstarApp')
library(shinythemes)
runApp('Test_DB/inst/ProstarApp')
library(shinyWidgets)
runApp('Test_DB/inst/ProstarApp')
shinyWidgetsGallery()
runApp('Test_DB/inst/ProstarApp')
shinyWidgetsGallery()
runApp('~/Github/Test_DB/inst/ProstarApp')
runApp('Test_DB/inst/ProstarApp')
shinydashboardPlusGallery()
runApp('Test_DB/inst/ProstarApp')
runApp('Test_DB/inst/ProstarApp')
shinydashboardPlusGallery()
runApp('Test_DB/inst/ProstarApp')
runApp('Test_DB/inst/ProstarApp')
runApp('Test_DB/inst/ProstarApp')
shiny::runApp('Test_DB/inst/ProstarApp')
runApp('Test_DB/inst/ProstarApp')
runApp('Test_DB/inst/ProstarApp')
runApp('Test_DB/inst/ProstarApp')
shinyWidgetsGallery()
runApp('~/Github/Test_DB/inst/ProstarApp')
runApp('Test_DB/inst/ProstarApp')
shiny::runApp('Test_DB/inst/ProstarApp')
install.packages("UpSetR")
library(UpSetR)
upsetSample(miniACC)
upsetSamples(miniACC)
BiocManager::install("MultiAssayExperiment")
library(MultiAssayExperiment)
library(GenomicRanges)
library(SummarizedExperiment)
library(RaggedExperiment)
BiocManager::install("RaggedExperiment")
library(RaggedExperiment)
library(UpSetR)
upsetSamples(miniACC)
class(miniACC)
summary(miniACC)
summary(miniACC)
summary(miniACC)
dataset <- miniACC
rm(dataset)
miniACC <- miniACC
colData(miniACC)
head(colData(miniACC))
empty <- MultiAssayExperiment()
rm(miniACC)
empty
slotNames(empty)
class(empty)
class(experiments(empty))
head(colData(empty))
head(colData(miniACC))
head(experiments(miniACC))
miniACC[["gistic"]]
miniACC[[1:5],,]
head(experiments(miniACC))
head(sampleMap(miniACC))
head(experiments(miniACC)[1])
head(experiments(miniACC)[[1]])
head((experiments(miniACC))[[1]])
miniACC[,,"Mutations"]
shiny::runApp('Prostar/inst/ProstarApp')
runApp('Prostar/inst/ProstarApp')
#
#
#
#
# GetDatasetOverview <- reactive({
#   print("In GetDatasetOverview")
#   print(pipeline$current.obj)
#   req(pipeline$current.obj)
#
#   obj <- pipeline$current.dataset[[pipeline$current.indice]]
#
#   columns <- c("Number of samples","Number of conditions",
#                "Number of lines", "Number of missing values", "% of missing values",
#                "Number of empty lines")
#
#   do <- data.frame(Definition= columns,
#                    Value=rep(0,length(columns)))
#
#   NA.count<- length(which(is.na(Biobase::exprs(obj)==TRUE)))
#   pourcentage <- 100 * round(NA.count/(ncol(obj)*nrow(obj)), digits=4)
#   nb.empty.lines <- sum(apply(
#     is.na(as.matrix(Biobase::exprs(obj))), 1, all))
#
#
#   val <- c(ncol((Biobase::exprs(obj))),
#            length(unique(Biobase::pData(obj)$Condition)),
#            nrow((Biobase::exprs(obj))),
#            NA.count,
#            pourcentage,
#            nb.empty.lines)
#   do$Value <- val
#
#   do
# })
GetDatasetOverview2 <- function(obj){
req(obj)
columns <- c("Number of samples","Number of conditions",
"Number of lines", "Number of missing values", "% of missing values",
"Number of empty lines")
do <- data.frame(Definition= columns,
Value=rep(0,length(columns)))
NA.count<- length(which(is.na(Biobase::exprs(obj)==TRUE)))
pourcentage <- 100 * round(NA.count/(ncol(obj)*nrow(obj)), digits=4)
nb.empty.lines <- sum(apply(
is.na(as.matrix(Biobase::exprs(obj))), 1, all))
val <- c(ncol((Biobase::exprs(obj))),
length(unique(Biobase::pData(obj)$Condition)),
nrow((Biobase::exprs(obj))),
NA.count,
pourcentage,
nb.empty.lines)
do$Value <- val
return(do)
}
initComplete <- function(){
return (JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': 'darkgrey', 'color': 'black'});",
"}"))
}
# function to read DT inputs
shinyValue <- function(id,num) {
unlist(lapply(seq_len(num),function(i) {
value <- input[[paste0(id,i)]]
if (is.null(value)) NA else value
}))
}
shinyOutput <- function(FUN,id,num,...) {
inputs <- character(num)
for (i in seq_len(num)) {
inputs[i] <- as.character(FUN(paste0(id,i),label=NULL,...))
}
inputs
}
# function for dynamic inputs in DT
shinyInput <- function(FUN,id,num,...) {
inputs <- character(num)
for (i in seq_len(num)) {
inputs[i] <- as.character(FUN(paste0(id,i),label=NULL,...))
}
inputs
}
# Call this function with all the regular navbarPage() parameters, plus a text parameter,
# if you want to add text to the navbar
navbarPageWithText <- function(..., text) {
navbar <- navbarPage(...)
textEl <- tags$p(class = "navbar-text", text)
navbar[[3]][[1]]$children[[1]] <- htmltools::tagAppendChild(
navbar[[3]][[1]]$children[[1]], textEl)
navbar
}
# Call this function with an input (such as `textInput("text", NULL, "Search")`) if you
# want to add an input to the navbar
navbarPageWithInputs <- function(..., inputs) {
navbar <- navbarPage(...)
form <- tags$form(class = "navbar-form", inputs)
navbar[[3]][[1]]$children[[1]] <- htmltools::tagAppendChild(
navbar[[3]][[1]]$children[[1]], form)
navbar
}
######
### Miscelllaneous functions
#' busyIndicator
busyIndicator <- function(text = "Calculation in progress..",
img = "images/ajax-loader.gif", wait=1000) {
tagList(
singleton(tags$head(
tags$link(rel="stylesheet",
type="text/css",href="busyIndicator/busyIndicator.css")
))
,div(class="busy-indicator",p(text),img(src=img))
,tags$script(sprintf(
"	setInterval(function(){
if ($('html').hasClass('shiny-busy')) {
setTimeout(function() {
if ($('html').hasClass('shiny-busy')) {
$('div.busy-indicator').show()
}
}, %d)
} else {
$('div.busy-indicator').hide()
}
},100)
",wait)
)
)
}
SetCustomCSS <- function(){
inlineCSS(".body { font-size:14px;}")
tags$head(includeCSS("www/css/arrow.css"))
tags$head(HTML("<script type='text/javascript' src='sbs/shinyBS.js'></script>"))
tags$head(tags$style(".modal-dialog{ width:200px}"))
tags$head( tags$style(HTML("hr {border-top: 1px solid #000000;}")))
includeCSS("www/css/prostar.css")
#,includeCSS("www/css/fontawesome.css")
inlineCSS(".body { font-size:14px;}")
inlineCSS(".rect {float: left;
width: 100px;
height: 20px;
margin: 2px;
border: 1px solid rgba(0, 0, 0, .2);}")
inlineCSS(".green {background: #06AB27}")
inlineCSS(".red {background: #C90404}")
inlineCSS(".grey {background:lightgrey;}")
inlineCSS(".modal-backdrop {z-index: 1000}")
## to position correctly the UI under the navbarmenu
tags$head(tags$style(type="text/css", "body {padding-top: 70px;}"))
}
Group2Color <- reactive({
print(paste0("rv$settings()$whichGroup2Color = ", rv.prostar$settings()$whichGroup2Color))
rv.prostar$settings()$whichGroup2Color
})
getDataForExprs <- function(obj){
test.table <- as.data.frame(round(Biobase::exprs(obj),digits=rv.prostar$settings()$nDigits))
# print(paste0("tutu:",obj@experimentData@other$OriginOfValues))
if (!is.null(obj@experimentData@other$OriginOfValues)){ #agregated dataset
test.table <- cbind(test.table,
Biobase::fData(obj)[,obj@experimentData@other$OriginOfValues])
# print(paste0("tutu:",head(test.table)))
} else {
test.table <- cbind(test.table,
as.data.frame(matrix(rep(NA,ncol(test.table)*nrow(test.table)), nrow=nrow(test.table))))
#print(paste0("tata:",head(test.table)))
}
return(test.table)
}
############################""
getPackagesVersions <- reactive({
type <- "all"
outOfDate <- "(Out of date)"
dev <- "(Devel)"
biocRelease <- NULL
DAPARdata.version <- NULL
tryCatch({
biocRelease <- available.packages(contrib.url("http://bioconductor.org/packages/release/bioc/"))
require(XML)
html <- readHTMLTable("http://bioconductor.org/packages/release/data/experiment/html/DAPARdata.html")
DAPARdata.version <- as.character(html[[3]][2][1,])
}, warning = function(w) {
return()
}, error = function(e) {
return()
}, finally = {
#cleanup-code
})
pkgs <- c("Prostar", "DAPAR", "DAPARdata")
loc.pkgs <-c("Prostar.loc", "DAPAR.loc", "DAPARdata.loc")
instPkgs <- list(Prostar = installed.packages(lib.loc=Prostar.loc)["Prostar","Version"],
DAPAR = installed.packages(lib.loc=DAPAR.loc)["DAPAR","Version"],
DAPARdata = installed.packages(lib.loc=DAPARdata.loc)["DAPARdata","Version"])
names <- c(as.character(tags$a(href="http://www.bioconductor.org/packages/release/bioc/html/Prostar.html", "Prostar")),
as.character(tags$a(href="http://www.bioconductor.org/packages/release/bioc/html/DAPAR.html", "DAPAR")),
as.character(tags$a(href="http://www.bioconductor.org/packages/release/data/experiment/html/DAPARdata.html", "DAPARdata")))
df <- data.frame("Name" = names,
"Installed.packages"= rep(NA, 3),
"Bioc.release" =  rep(NA, 3),
"NeedsUpdate"= rep(FALSE,3),
stringsAsFactors = FALSE)
df[, "Installed.packages"] <- unlist(instPkgs)
if (!is.null(biocRelease)) {
biocPkgs <- list(Prostar = as.character(biocRelease["Prostar","Version"]),
DAPAR = as.character(biocRelease["DAPAR","Version"]),
DAPARdata = as.character(DAPARdata.version))
if (compareVersion(instPkgs$Prostar,biocPkgs$Prostar) == 0){df[1,"Name"] <-  names[1]}
else if (compareVersion(instPkgs$Prostar,biocPkgs$Prostar) == 1){df[1,"Name"] <-   paste(names[1],  "<strong>",dev, "</strong>", sep=" ")}
else if (compareVersion(instPkgs$Prostar,biocPkgs$Prostar)==-1){
df[1,"Name"] <-   paste(names[1], "<strong>", outOfDate, "</strong>", sep=" ")
inst <- unlist(strsplit(instPkgs$Prostar, split=".", fixed=TRUE))
bioc <- unlist(strsplit(biocPkgs$Prostar, split=".", fixed=TRUE))
df[1,"NeedsUpdate"] <- ((inst[2]==bioc[2] && (as.numeric(inst[3]) < as.numeric(bioc[3]))))
}
if (compareVersion(instPkgs$DAPAR,biocPkgs$DAPAR) == 0){df[2,"Name"] <-  names[2]}
else if (compareVersion(instPkgs$DAPAR , biocPkgs$DAPAR) == 1){df[2,"Name"] <-   paste(names[2],  "<strong>",dev, "</strong>", sep=" ")}
else if (compareVersion(instPkgs$DAPAR , biocPkgs$DAPAR)==-1){
df[2,"Name"] <-   paste(names[2],  "<strong>",outOfDate, "</strong>", sep=" ")
inst <- unlist(strsplit(instPkgs$DAPAR, split=".", fixed=TRUE))
bioc <- unlist(strsplit(biocPkgs$DAPAR, split=".", fixed=TRUE))
df[2,"NeedsUpdate"] <- ((inst[2]==bioc[2] && (as.numeric(inst[3]) < as.numeric(bioc[3]))))
}
if (compareVersion(instPkgs$DAPARdata,biocPkgs$DAPARdata) == 0){df[3,"Name"] <-  names[3]}
else if (compareVersion(instPkgs$DAPARdata , biocPkgs$DAPARdata) == 1){df[3,"Name"] <-   paste(names[3],  "<strong>",dev, "</strong>", sep=" ")}
else if (compareVersion(instPkgs$DAPARdata , biocPkgs$DAPARdata)==-1){
df[3,"Name"] <-   paste(names[3],  "<strong>",outOfDate, "</strong>", sep=" ")
inst <- unlist(strsplit(instPkgs$DAPARdata, split=".", fixed=TRUE))
bioc <- unlist(strsplit(biocPkgs$DAPARdata, split=".", fixed=TRUE))
df[3,"NeedsUpdate"] <- ((inst[2]==bioc[2] && (as.numeric(inst[3]) < as.numeric(bioc[3]))))
}
df[, "Bioc.release"] <- unlist(biocPkgs)
}
colnames(df) <- c("Names", "Installed packages", "Bioc release","NeedsUpdate")
switch(type,
all=df <- df,
installed = {
df <- df[,1:2]
df[,1] <- c('Prostar', 'DAPAR', 'DAPARdata')
}
)
print(df)
df
#}
})
###-------------------------------------
Compute_PCA_nbDimensions <- reactive({
# ncp should not be greater than...
nmax <- 12
# pour info, ncp = nombre de composantes ou de dimensions dans les r?sultats de l'ACP
y <- Biobase::exprs(rv$current.obj)
nprot <- dim(y)[1]
# If too big, take the number of conditions.
n <- dim(y)[2]
if (n > nmax){
n <- length(unique(Biobase::pData(rv$current.obj)$Condition))
}
ncp <- min(n, nmax)
ncp
})
GetOnlineZipVersion <- function(){
thepage <- readLines('http://prabig-prostar.univ-lyon1.fr/ProstarZeroInstall/')
substr(thepage[12], regexpr("Prostar_",thepage[12])[1], 2+regexpr("zip",thepage[12])[1])
thetable <- readHTMLTable('http://prabig-prostar.univ-lyon1.fr/ProstarZeroInstall/', stringsAsFactors=FALSE)
onlineZipVersion <- thetable[[1]]$Name[3]
return(onlineZipVersion)
}
launchGA <- function(){
if (system('hostname')=="prabig-prostar"){
tags$head(includeScript("www/google-analytics.js"))
} else {
#tags$head(includeScript("www/google-analytics-ProstarZeroInstall.js"))
}
}
ReadPipelineConfig <- function(filename) {
f <- readLines(filename)
f <- f[f != ""]
id_names <- grep(pattern = "\\[", f)
pipeline.def <- vector(mode='list', length=length(grep(pattern = "\\[", f)))
i <- 1
count <- 1
while (i < id_names[length(id_names)]) {
if (i %in% id_names) {
names(pipeline.def)[[count]] <- gsub("\\[|\\]", "", f[i])
i=i+1
}
else {
pipeline.def[[count]] <- f[i:(id_names[count+1]-1)] # id_names[ x ]
i=id_names[count+1]
count <- count + 1
}
if (i >= id_names[length(id_names)]) {
names(pipeline.def)[[length(id_names)]] <- gsub("\\[|\\]", "", f[i])
pipeline.def[[count]] <- f[(i+1):length(f)]
}
}
return(pipeline.def)
}
runApp('Prostar/inst/ProstarApp')
setwd("Prostar/inst/ProstarApp/")
runApp('Prostar/inst/ProstarApp')
shiny::runApp()
getwd()
shiny::runApp()
runApp()
launchGA <- function(){
if (system('hostname')=="prabig-prostar"){
tags$head(includeScript("www/google-analytics.js"))
} else {
#tags$head(includeScript("www/google-analytics-ProstarZeroInstall.js"))
}
}
runApp()
ReadPipelineConfig <- function(filename) {
f <- readLines(filename)
f <- f[f != ""]
id_names <- grep(pattern = "\\[", f)
pipeline.def <- vector(mode='list', length=length(grep(pattern = "\\[", f)))
i <- 1
count <- 1
while (i < id_names[length(id_names)]) {
if (i %in% id_names) {
names(pipeline.def)[[count]] <- gsub("\\[|\\]", "", f[i])
i=i+1
}
else {
pipeline.def[[count]] <- f[i:(id_names[count+1]-1)] # id_names[ x ]
i=id_names[count+1]
count <- count + 1
}
if (i >= id_names[length(id_names)]) {
names(pipeline.def)[[length(id_names)]] <- gsub("\\[|\\]", "", f[i])
pipeline.def[[count]] <- f[(i+1):length(f)]
}
}
return(pipeline.def)
}
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
getwd()
source(file.path("./src", "modules/Menu_Home/moduleReleaseNotes.R"),  local = TRUE)$value
source(file.path("./src", "modules/Menu_Home/moduleHomepage.R"),  local = TRUE)$value
source(file.path("./src", "modules/Menu_Home/moduleSettings.R"),  local = TRUE)$value
source(file.path("./src", "modules/Menu_Home/moduleCheckUpdates.R"),  local = TRUE)$value
source(file.path("./src", "modules/Menu_Help/moduleBugReport.R"),  local = TRUE)$value
source(file.path("./src", "modules/Misc/modulePopover.R"),  local = TRUE)$value
source(file.path("./src", "modules/Misc/moduleInsertMarkdown.R"),  local = TRUE)$value
source(file.path("./src", "modules/Misc/moduleStaticDataTable.R"),  local = TRUE)$value
source(file.path("./src", "modules/Menu_DataManager/moduleInfoDataset.R"),  local = TRUE)$value
source(file.path("./src", "commonFunc.R"),  local = TRUE)$value
## L'appel a core.R permet d'attendre le chargement d'un dataset et de crÃ©er ensuite le pipeline correspondant
source(file.path("./src", "core.R"),  local = TRUE)$value
source(file.path("./src", "modules/Misc/modulePopover.R"),  local = TRUE)$value
source(file.path("./src", "modules/Misc/moduleInsertMarkdown.R"),  local = TRUE)$value
source(file.path("./src", "modules/Menu_Home/moduleReleaseNotes.R"),  local = TRUE)$value
source(file.path("./src", "modules/Menu_Home/moduleHomepage.R"),  local = TRUE)$value
source(file.path("./src", "modules/Menu_Home/moduleSettings.R"),  local = TRUE)$value
source(file.path("./src", "modules/Menu_Home/moduleCheckUpdates.R"),  local = TRUE)$value
source(file.path("./src", "modules/Menu_Help/moduleBugReport.R"),  local = TRUE)$value
runApp()
shiny::runApp()
getwd()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
>>>>>>> 16efda6b2b280178cfd2b9cffc6d6e9a41699eba
