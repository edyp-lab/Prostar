source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
obj <- PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
tmp <- BuildAdjacencyMatrix(obj[['original']], obj@proteinID, unique=FALSE)
tmp
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
obj <- PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
obj@CC
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
obj <- PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
obj@matAdj
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
obj <- PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
splitAdjacencyMat <- function(X){
hasShared <- length( which(rowSums(X) > 1)) > 0
hasSpec <- length( which(rowSums(X) == 1)) > 0
if (hasShared && !hasSpec){
tmpShared <- X
tmpSpec <- X
tmpSpec[which(rowSums(tmpSpec) > 1),] <- 0
}
else if (!hasShared && hasSpec){
tmpSpec <- X
tmpShared <- X
tmpShared[which(rowSums(tmpShared) == 1),] <- 0
}
else if (hasShared && hasSpec){
tmpSpec <- X
tmpShared <- X
tmpShared[which(rowSums(tmpShared) == 1),] <- 0
tmpSpec[which(rowSums(tmpSpec) > 1),] <- 0
} else {
tmpSpec <- X
tmpShared <- X
}
return (list(Xshared = tmpShared, Xspec = tmpSpec))
}
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
obj <- PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
obj <- PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
source('~/GitHub/DAPAR/R/agregation.R')
source('~/GitHub/DAPAR/R/agregation.R')
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
obj <- PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
source('~/GitHub/DAPAR/R/agregation.R')
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
debugSource('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
obj <- PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
dim(tmp)
X <- tmp
hasShared <- length( which(rowSums(X) > 1)) > 0
hasSpec <- length( which(rowSums(X) == 1)) > 0
hasSpec
hasShared
if (hasShared && !hasSpec){
tmpShared <- X
tmpSpec <- X
tmpSpec[which(rowSums(tmpSpec) > 1),] <- 0
}
tmpSpec <- X
tmpShared <- X
tmpShared[which(rowSums(tmpShared) == 1),] <- 0
tmpSpec[which(rowSums(tmpSpec) > 1),] <- 0
tmpShared[which(rowSums(tmpShared) == 1),] <- 0
utils::data(Exp1_R25_pept, package='DAPARdata')
X <- BuildAdjacencyMatrix(Exp1_R25_pept[1:1000], "Protein_group_IDs", FALSE)
X.ll <- splitAdjacencyMat(X)
tmpSpec[which(rowSums(tmpSpec) > 1),] <- 0
X <- X.ll
hasShared <- length( which(rowSums(X) > 1)) > 0
hasSpec <- length( which(rowSums(X) == 1)) > 0
source('~/GitHub/DAPAR/R/agregation.R')
tmpShared[which(rowSums(tmpShared) == 1),] <- 0
tmpShared <- X
tmpSpec <- X
tmpShared[which(rowSums(tmpShared) == 1),] <- 0
which(rowSums(tmpShared) == 1)
tmpShared[which(rowSums(tmpShared) == 1),]
X <- X[1:10,1:10]
X
tmpShared <- X
tmpSpec <- X
tmpSpec[which(rowSums(tmpSpec) > 1),] <- 0
tmpShared[which(rowSums(tmpShared) == 1),] <- 0
tmpShared[which(rowSums(tmpShared) == 1),] <- 0
X[1,1] <- 1
class(X)
str(X)
X$p[1,1] <- 1
X@p[1,1] <- 1
X@p <- 1
X@x
X@x <-1
X@x
X
source('~/GitHub/DAPAR/R/agregation.R')
source('~/GitHub/DAPAR/R/agregation.R')
X <- BuildAdjacencyMatrix(Exp1_R25_pept[1:1000], "Protein_group_IDs", TRUE)
class(X)
X[1,1] <- 0
source('~/GitHub/DAPAR/R/agregation.R')
X <- BuildAdjacencyMatrix(Exp1_R25_pept[1:1000], "Protein_group_IDs", FALSE)
class(X)
utils::data(Exp1_R25_pept, package='DAPARdata')
X <- BuildAdjacencyMatrix(Exp1_R25_pept[1:1000], "Protein_group_IDs", FALSE)
class(X)
source('~/GitHub/DAPAR/R/agregation.R')
X <- BuildAdjacencyMatrix(Exp1_R25_pept[1:1000], "Protein_group_IDs", FALSE)
class(X)
source('~/GitHub/DAPAR/R/agregation.R')
X <- BuildAdjacencyMatrix(Exp1_R25_pept[1:1000], "Protein_group_IDs", FALSE)
source('~/GitHub/DAPAR/R/agregation.R')
X <- BuildAdjacencyMatrix(Exp1_R25_pept[1:1000], "Protein_group_IDs", FALSE)
if (unique == TRUE){
ll <- which(rowSums(t)>1)
if (length(ll) > 0) {
t[ll,] <- 0
}
}
source('~/GitHub/DAPAR/R/agregation.R')
source('~/GitHub/DAPAR/R/agregation.R')
source('~/GitHub/DAPAR/R/agregation.R')
X <- BuildAdjacencyMatrix(Exp1_R25_pept[1:1000], "Protein_group_IDs", FALSE)
X <- BuildListAdjacencyMatrices(Exp1_R25_pept[1:1000], "Protein_group_IDs")
str(X)
X$Xshared
X$Xshared[1:10,1:10]
X$Xspec[1:10,1:10]
obj.pep <- Exp1_R25_pept[1:1000]
protID <- "Protein_group_IDs"
data <- Biobase::exprs(obj.pep)
PG <- Biobase::fData(obj.pep)[,protID]
PG.l <- strsplit(as.character(PG), split=";", fixed=TRUE)
t <- table(data.frame(A=rep(seq_along(PG.l), lengths(PG.l)), B=unlist(PG.l)))
t
t[1:10,1:10]
t[1:3,1] <- 1
t[4,1:6] <- 1
t[1:10,1:10]
t[8,3] <- 1
t[1:10,1:10]
t <- t[1:10,1:10]
t
tmpShared <- t
tmpSpec <- t
ll <- which(rowSums(tmpSpec)>1)
if (length(ll) > 0) {
tmpSpec[ll,] <- 0
}
ll <- which(rowSums(tmpShared)==1)
if (length(ll) > 0) {
tmpShared[ll,] <- 0
}
tmpShared <- t
tmpSpec <- t
ll <- which(rowSums(tmpSpec)>1)
if (length(ll) > 0) {
tmpSpec[ll,] <- 0
}
ll <- which(rowSums(tmpShared)==1)
if (length(ll) > 0) {
tmpShared[ll,] <- 0
}
tmpShared
tmpSpec
t
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
source('~/GitHub/DAPAR/R/agregation.R')
X <- BuildListAdjacencyMatrices(Exp1_R25_pept[1:1000], "Protein_group_IDs")
X
X[1:10,1:10]
X$complete[1:10,1:10]
X$Xcomplete[1:10,1:10]
source('~/GitHub/DAPAR/R/agregation.R')
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
obj <- PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
source('~/GitHub/DAPAR/R/pipeline-template-class.R', encoding = 'UTF-8')
obj <- PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
obj <- PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
obj <- PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
debugSource('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
obj <- PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
data <- Exp1_R25_pept
obj <- PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
source('~/GitHub/DAPAR/R/utils.R')
obj <- PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
obj
class(obj@matAdj)
str(obj@matAdj)
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
obj <- PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
library(DAPAR)
obj <- PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
source('~/GitHub/DAPAR/R/get_pep_prot_cc.R')
source('~/GitHub/DAPAR/R/agregation.R')
source('~/GitHub/DAPAR/R/get_pep_prot_cc.R')
source('~/GitHub/DAPAR/R/get_pep_prot_cc.R')
obj <- PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
obj <- PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
str(X)
X <- BuildListAdjacencyMatrices(Exp1_R25_pept[1:1000], "Protein_group_IDs")
str(X)
source('~/GitHub/DAPAR/R/agregation.R')
X <- BuildListAdjacencyMatrices(Exp1_R25_pept[1:1000], "Protein_group_IDs")
str(X)
l <- ComputeConnexComposants(X)
get.pep.prot.cc(as.matrix(X$All))
as.matrix(X$All)
matrix(X$All)
Matrix(X$All)
class(X$all)
dim(X$all)
source('~/GitHub/DAPAR/R/get_pep_prot_cc.R')
as.matrix(X$all)
source('~/GitHub/DAPAR/R/get_pep_prot_cc.R')
X <- BuildListAdjacencyMatrices(Exp1_R25_pept[1:1000], "Protein_group_IDs")
get.pep.prot.cc(X$all)
require(Matrix)
require(igraph)
require(graph)
get.pep.prot.cc(X$all)
source('~/GitHub/DAPAR/R/get_pep_prot_cc.R')
obj <- PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
library(DAPAR)
obj <- PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
source('~/GitHub/DAPAR/R/get_pep_prot_cc.R')
obj <- PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
obj <- PipelinePeptide( proteinID='Protein_group_IDs',analysis= 'test', pipelineType = "peptide",processes='Filtering', experiments=list(original=data), colData=Biobase::pData(data))
source('~/GitHub/Prostar/inst/ProstarApp/src/modules/Menu_DataManager/moduleOpenDemoDataset.R')
shiny::runApp('~/GitHub/Prostar/inst/ProstarApp')
setwd("~/GitHub/Prostar/inst/ProstarApp")
runApp()
library(DAPAR)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
source('~/GitHub/DAPAR/R/pipeline-template-class.R', encoding = 'UTF-8')
source('~/GitHub/DAPAR/R/protein-pipeline-class.R', encoding = 'UTF-8')
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
source('~/GitHub/DAPAR/R/utils.R')
source('~/GitHub/Prostar/inst/ProstarApp/src/modules/Menu_DataManager/moduleOpenDemoDataset.R')
source('~/GitHub/Prostar/inst/ProstarApp/src/modules/Menu_DataManager/moduleOpenDemoDataset.R')
runApp()
source('~/GitHub/Prostar/inst/ProstarApp/src/modules/Menu_DataManager/moduleOpenDemoDataset.R')
runApp()
runApp()
library(Matrix)
library(igraph)
library(graph)
runApp()
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
shiny::runApp()
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
install.packages("~/GitHub/DAPAR_2.0.tar.gz", repos = NULL, type = "source")
runApp()
runApp()
source('~/GitHub/Prostar/inst/ProstarApp/src/modules/Menu_DataManager/moduleOpenDemoDataset.R')
runApp()
runApp()
runApp()
library(DAPAR)
runApp()
runApp()
install.packages("~/GitHub/DAPAR_2.0.tar.gz", repos = NULL, type = "source")
library(DAPAR)
PipelinePeptide
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
setwd("~/GitHub/DAPAR")
roxygen2::roxygenize()
roxygen2::roxygenize()
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
source('~/GitHub/DAPAR/R/pipeline-template-class.R', encoding = 'UTF-8')
source('~/GitHub/DAPAR/R/pipeline-template-class.R', encoding = 'UTF-8')
roxygen2::roxygenize()
source('~/GitHub/DAPAR/R/protein-pipeline-class.R', encoding = 'UTF-8')
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
source('~/GitHub/DAPAR/R/pipeline-template-class.R', encoding = 'UTF-8')
roxygen2::roxygenize()
source('~/GitHub/DAPAR/R/pipeline-template-class.R', encoding = 'UTF-8')
source('~/GitHub/DAPAR/R/protein-pipeline-class.R', encoding = 'UTF-8')
roxygen2::roxygenize()
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
roxygen2::roxygenize()
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
source('~/GitHub/DAPAR/R/pipeline-template-class.R', encoding = 'UTF-8')
source('~/GitHub/DAPAR/R/pipeline-template-class.R', encoding = 'UTF-8')
roxygen2::roxygenize()
roxygen2::roxygenize()
install.packages('for')
source('~/GitHub/DAPAR/R/protein-pipeline-class.R', encoding = 'UTF-8')
source('~/GitHub/DAPAR/R/protein-pipeline-class.R', encoding = 'UTF-8')
install.packages('for')
roxygen2::roxygenize()
source('~/GitHub/DAPAR/R/pipeline-template-class.R', encoding = 'UTF-8')
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
roxygen2::roxygenize()
roxygen2::roxygenize()
source('~/GitHub/DAPAR/R/pipeline-template-class.R', encoding = 'UTF-8')
roxygen2::roxygenize()
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
source('~/GitHub/DAPAR/R/protein-pipeline-class.R', encoding = 'UTF-8')
roxygen2::roxygenize()
source('~/GitHub/DAPAR/R/peptide-pipeline-class.R')
source('~/GitHub/DAPAR/R/protein-pipeline-class.R', encoding = 'UTF-8')
roxygen2::roxygenize()
install.packages("~/GitHub/DAPAR_2.0.tar.gz", repos = NULL, type = "source")
library(DAPAR)
?`PipelineProtein-class`
#' @title Computes the detailed number of peptides used for aggregating each protein
#' @param X An adjacency matrix
#' @param pepData A data.frame of quantitative data
#' @return A list of two items
#' @author Samuel Wieczorek
#' utils::data(Exp1_R25_pept, package='DAPARdata')
#' obj.pep <- Exp1_R25_pept[1:1000]
#' protID <- "Protein_group_IDs"
#' X <- BuildAdjacencyMatrix(obj.pep, protID, FALSE)
#' GetDetailedNbPeptidesUsed(X, obj.pep)
GetDetailedNbPeptidesUsed <- function(X, pepData){
pepData[!is.na(pepData)] <- 1
pepData[is.na(pepData)] <- 0
mat <- splitAdjacencyMat(X)
return(list(nShared=t(mat$Xshared) %*% pepData,
nSpec=t(mat$Xspec) %*% pepData))
}
plotPCA_Var(res.pca)
dat <- wrapper.impute.mle(dat)
#' This function is xxxxxxx
#'
#' @title xxxxxx
#' @param X an n.pep*n.prot indicator matrix.
#' @param y1 n.pep*n.samples matrice giving the observed counts for
## each peptide in each sample from the condition 1
#' @param y2  n.pep*n.samples matrice giving the observed counts for
## each peptide in each sample from the condition 2
#' @return xxxxxxxxxx..
#' @author Thomas Burger, Laurent Jacob
LH0 <- function(X, y1, y2){
n <- ncol(y1)+ncol(y2)
## Ytilde <- matrix(c(as.vector(y1), as.vector(y2)), ncol=1)
## ss <- norm(Ytilde, 'F')^2 - n*norm(matrix(rowMeans(cbind(y1, y2)), ncol=1), 'F')^2
ss <- norm(y1, 'F')^2 + norm(y2, 'F')^2 - n*norm(matrix(rowMeans(cbind(y1, y2)), ncol=1), 'F')^2
return(list(ss=ss))
}
roxygen2::roxygenize()
install.packages("~/GitHub/DAPAR_2.0.tar.gz", repos = NULL, type = "source")
library(DAPAR)
shiny::runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
library(Matrix)
runApp('~/GitHub/Prostar/inst/ProstarApp')
shiny::runApp('~/GitHub/Prostar/inst/ProstarApp')
library(Matrix)
shiny::runApp('~/GitHub/Prostar/inst/ProstarApp')
shiny::runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
shiny::runApp('~/GitHub/Prostar/inst/ProstarApp')
source('~/GitHub/Prostar/inst/ProstarApp/src/modules/Menu_DataManager/moduleConvertData.R')
runApp('~/GitHub/Prostar/inst/ProstarApp')
source('~/GitHub/Prostar/inst/ProstarApp/src/modules/Menu_DataManager/moduleConvertData.R')
runApp('~/GitHub/Prostar/inst/ProstarApp')
source('~/GitHub/DAPAR/R/pipeline-template-class.R', encoding = 'UTF-8')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
library(DAPAR)
source('~/GitHub/DAPAR/R/pipeline-template-class.R', encoding = 'UTF-8')
shiny::runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
source('~/GitHub/Prostar/inst/ProstarApp/src/modules/Menu_DataManager/moduleChoicePipeline.R')
runApp('~/GitHub/Prostar/inst/ProstarApp')
source('~/GitHub/Prostar/inst/ProstarApp/src/modules/Menu_DataManager/moduleChoicePipeline.R')
source('~/GitHub/Prostar/inst/ProstarApp/src/modules/Menu_DataManager/moduleChoicePipeline.R')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
source('~/GitHub/Prostar/inst/ProstarApp/src/modules/Menu_DataManager/moduleChoicePipeline.R')
runApp('~/GitHub/Prostar/inst/ProstarApp')
shiny::runApp('~/GitHub/Prostar/inst/ProstarApp')
library(DAPAR)
shiny::runApp('~/GitHub/Prostar/inst/ProstarApp')
source('~/GitHub/Prostar/inst/ProstarApp/src/Misc/commonFunc.R')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
shiny::runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
setwd("~/GitHub/Prostar/inst/ProstarApp")
SourceFiles <- function(ll.files){
for (f in ll.files){
print(paste0('sourcing ', f))
if (f != 'src/core.R')
source(file.path(".",f), local=TRUE)$value
}
}
SourceFiles(list.files('src/Misc',full.name = TRUE, pattern='*.R$', recursive=TRUE))
SourceFiles(list.files('src/modules/Menu_Home',full.name = TRUE, pattern='*.R$', recursive=TRUE))
source('~/GitHub/Prostar/inst/ProstarApp/src/modules/Menu_Home/moduleHomepage.R')
runApp()
?source
SourceFiles <- function(ll.files){
for (f in ll.files){
print(paste0('sourcing ', f))
if (f != 'src/core.R')
source(file.path(".",f), local=TRUE, verbose=TRUE, print=TRUE, trace=TRUE)$value
}
}
SourceFiles(list.files('src/Misc',full.name = TRUE, pattern='*.R$', recursive=TRUE))
SourceFiles <- function(ll.files){
for (f in ll.files){
print(paste0('sourcing ', f))
if (f != 'src/core.R')
source(file.path(".",f), local=TRUE, verbose=TRUE, print=TRUE)$value
}
}
SourceFiles(list.files('src/Misc',full.name = TRUE, pattern='*.R$', recursive=TRUE))
SourceFiles <- function(ll.files){
for (f in ll.files){
print(paste0('sourcing ', f))
if (f != 'src/core.R')
source(file.path(".",f), local=TRUE, verbose=TRUE, print=TRUE)
}
}
SourceFiles(list.files('src/modules/Menu_Home',full.name = TRUE, pattern='*.R$', recursive=TRUE))
val <-SourceFiles(list.files('src/modules/Menu_Home',full.name = TRUE, pattern='*.R$', recursive=TRUE))
str(val)
runApp()
runApp()
setwd("~/GitHub/Prostar/inst/ProstarApp/src")
list.files('src/Misc',full.name = TRUE, pattern='*.R$', recursive=TRUE))
list.files('src/Misc',full.name = TRUE, pattern='*.R$', recursive=TRUE)
list.files('src',full.name = TRUE, pattern='*.R$', recursive=TRUE)
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
source('~/GitHub/Prostar/inst/ProstarApp/src/Misc/commonFunc.R')
source('~/GitHub/Prostar/inst/ProstarApp/src/Misc/moduleInfoDataset.R')
source('~/GitHub/Prostar/inst/ProstarApp/src/Misc/moduleInsertMarkdown.R')
source('~/GitHub/Prostar/inst/ProstarApp/src/Misc/moduleNavigation.R')
source('~/GitHub/Prostar/inst/ProstarApp/src/Misc/moduleNavigation2.R')
source('~/GitHub/Prostar/inst/ProstarApp/src/Misc/moduleNotaNumeric.R')
source('~/GitHub/Prostar/inst/ProstarApp/src/Misc/modulePopover.R')
source('~/GitHub/Prostar/inst/ProstarApp/src/Misc/moduleStaticDataTable.R')
runApp('~/GitHub/Prostar/inst/ProstarApp')
source('~/GitHub/Prostar/inst/ProstarApp/src/modules/Menu_Home/moduleSettings.R')
runApp('~/GitHub/Prostar/inst/ProstarApp')
source('~/GitHub/Prostar/inst/ProstarApp/src/modules/Menu_Home/moduleReleaseNotes.R')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
l <- readLines('src/AllSources.R')
getwd()
l <- readLines('AllSources.R')
l <- readLines('AllSources.R')
l
l <- readLines('AllSources.R')
l
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
runApp('~/GitHub/Prostar/inst/ProstarApp')
devtools::install_github('cb4ds/periscope')
library(periscope)
create_new_application("sampleapp1", location = tempdir(), sampleapp = TRUE)
runApp('sampleapp1')
devtools::install_github('cb4ds/periscope')
devtools::install_github('cb4ds/periscope')
install.packages("golem")
install.packages("golem")
