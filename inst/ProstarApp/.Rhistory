install.packages('BiocManager')'
''
install.packages('BiocManager')
BiocManager::install()
BiocManager::install()
install.packages('BiocManager')
BiocManager::install()
BiocManager::install('Prostar')
BiocManager::install('MSnbase')
intall.packages('ncdf4')
install.packages('ncdf4')
install.packages('ncdf4')
install.packages('ncdf4')
BiocManager::install('MSnbase')
BiocManager::install('MultiAssayExperiment')
BiocManager::install('SummarizedExperiment')
install.packages('sass')
source('/home/samuel/Documents/Github/DAPAR/R/PipelineTemplate-class.R')
library(MultiAssayExperiment)
source('/home/samuel/Documents/Github/DAPAR/R/PipelineTemplate-class.R')
source('~/Documents/Github/DAPAR/R/PipelineTemplate-class.R')
source('~/Documents/Github/DAPAR/R/PipelineTemplate-class.R')
source('~/Documents/Github/DAPAR/R/PipelineTemplate-class.R')
source('~/Documents/Github/DAPAR/R/PipelineTemplate-class.R')
source('~/Documents/Github/DAPAR/R/PipelineTemplate-class.R')
source('~/Documents/Github/DAPAR/R/PipelineTemplate-class.R')
source('~/Documents/Github/DAPAR/R/PipelineTemplate-class.R')
source('~/Documents/Github/DAPAR/R/PipelineTemplate-class.R')
shiny::runApp('Documents/Github/Prostar/inst/ProstarApp')
install.packages("shinydashboard")
shiny::runApp('Documents/Github/Prostar/inst/ProstarApp')
install.packages("shinydashboardPlus")
shiny::runApp('Documents/Github/Prostar/inst/ProstarApp')
install.packages("shinyjqui")
install.packages("shinyjs")
install.packages("shinyjs")
runApp('Documents/Github/Prostar/inst/ProstarApp')
setwd("~/Documents/Github/Prostar/inst/ProstarApp")
runApp('Documents/Github/Prostar/inst/ProstarApp')
runApp()
install.packages("Cairo")
install.packages("tidyverse")
install.packages("Cairo")
install.packages("Cairo")
runApp()
BiocManager::install('DAPARdata')
runApp()
BiocManager::install('BiocStyle')
install.packages("~/Documents/Github/DAPAR_2.0.tar.gz", repos = NULL, type = "source")
runApp()
source('~/Documents/Github/DAPAR/R/PipelineTemplate-class.R')
source('~/Documents/Github/DAPAR/R/PipelineTemplate-class.R')
runApp()
source('~/Documents/Github/DAPAR/R/PipelineTemplate-class.R')
runApp()
library(MultiAssayExperiment)
runApp()
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/PipelineTemplate-class.R')
runApp()
runApp()
runApp()
runApp()
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/PipelineTemplate-class.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/PipelineTemplate-class.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/PipelineTemplate-class.R')
source('~/Documents/Github/DAPAR/R/utils.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/PipelineTemplate-class.R')
runApp()
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/PipelineTemplate-class.R')
remove.packages("DAPAR", lib="~/R/x86_64-pc-linux-gnu-library/3.6")
shiny::runApp()
install.packages("~/Documents/Github/DAPAR_2.0.tar.gz", repos = NULL, type = "source")
runApp()
library(MultiAssayExperiment)
runApp()
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/PipelineTemplate-class.R')
runApp()
library(shiny)
library(shinydashboard)
body <- dashboardBody(
fluidRow(
tabBox(
title = NULL, width = 12,
# The id lets us use input$tabset1 on the server to find the current tab
id = "tabset1", height = "250px",
tabPanel("Victim", "Victim tab"),
tabPanel("Trafficker", "Trafficker tab")
)
),
fluidRow(infoBoxOutput("tabset1Selected"))
)
shinyApp(
ui = dashboardPage(
dashboardHeader(title = "Human Trafficking"),
dashboardSidebar(disable = TRUE),
body
),
server = function(input, output) {
# The currently selected tab from the tab box
output$tabset1Selected <- renderInfoBox({
infoBox("Selected Tab", input$tabset1, icon = icon("info-circle"))
})
}
)
if (interactive()) {
library(shiny)
# A dashboard header with 3 dropdown menus
header <- dashboardHeader(
title = "Dashboard Demo",
# Dropdown menu for messages
dropdownMenu(type = "messages", badgeStatus = "success",
messageItem("Support Team",
"This is the content of a message.",
time = "5 mins"
),
messageItem("Support Team",
"This is the content of another message.",
time = "2 hours"
),
messageItem("New User",
"Can I get some help?",
time = "Today"
)
),
# Dropdown menu for notifications
dropdownMenu(type = "notifications", badgeStatus = "warning",
notificationItem(icon = icon("users"), status = "info",
"5 new members joined today"
),
notificationItem(icon = icon("warning"), status = "danger",
"Resource usage near limit."
),
notificationItem(icon = icon("shopping-cart", lib = "glyphicon"),
status = "success", "25 sales made"
),
notificationItem(icon = icon("user", lib = "glyphicon"),
status = "danger", "You changed your username"
)
),
# Dropdown menu for tasks, with progress bar
dropdownMenu(type = "tasks", badgeStatus = "danger",
taskItem(value = 20, color = "aqua",
"Refactor code"
),
taskItem(value = 40, color = "green",
"Design new layout"
),
taskItem(value = 60, color = "yellow",
"Another task"
),
taskItem(value = 80, color = "red",
"Write documentation"
)
)
)
shinyApp(
ui = dashboardPage(
header,
dashboardSidebar(),
dashboardBody()
),
server = function(input, output) { }
)
}
runApp()
source('~/Documents/Github/Prostar/inst/ProstarApp/modules/process/peptide/module_Peptide_Agregation.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/protein-pipeline-class.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/protein-pipeline-class.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/protein-pipeline-class.R')
runApp()
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
runApp()
runApp()
runApp()
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
runApp()
installed.packages()["Prostar","Version"]
installed.packages()["Prostar"]
if (!installed.packages()["Prostar"])) installed.packages()["Prostar",'Version'], NA
if (!installed.packages()["Prostar"]) installed.packages()["Prostar",'Version'], N
if (!installed.packages()["Prostar"]) installed.packages()["Prostar",'Version'] NA
if (!installed.packages()["Prostar"]) installed.packages()["Prostar",'Version'] else NA
if (is.na(installed.packages()["Prostar"])) NA else installed.packages()["Prostar",'Version']
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
runApp()
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
runApp()
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
runApp()
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
runApp()
library(MultiAssayExperiment)
shiny::runApp()
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
runApp()
runApp()
source('~/Documents/Github/Prostar/inst/ProstarApp/Classes/pipeline-template-class.R')
runApp()
